@page "{id:int?}"
@model TryingTwitchOAuth.Pages.AuthorModel
@{
	ViewData["Title"] = "Author";
	var buttonsDisabled = !Model.Prediction.IsOpen;
}

<div class="container mt-5">
	<div class="row">
		<div class="col-md-8 offset-md-2">
			<div class="card">
				<div class="card-header row align-items-center">
					<div class="col">
						<h2 class="card-title">@(Model.IsCreate ? "Create" : "Update") Prediction</h2>
					</div>
					<div class="col text-end">
						<form method="post">
							<button type="submit" class="btn btn-danger" asp-page-handler="Delete" onclick="return confirm('Are you sure you want to delete this prediction?')">Delete</button>
						</form>
					</div>
				</div>
				<div class="card-body">
					@if (TempData["Message"] is string message && TempData["Style"] is string style)
					{
						<div id="alert" class="alert @style" role="alert">
							@message
						</div>
					}
					<form method="post">
						<input asp-for="WinnerOptionId" type="hidden" />
						<div class="form-group">
							<label class="mb-1" asp-for="Prediction.Title">Title</label>
							<input class="form-control" asp-for="Prediction.Title" required disabled="@buttonsDisabled" />
						</div>
						<div class="form-group mt-3">
							<label class="mb-1" asp-for="Prediction.Conference">Conference</label>
							<div class="d-flex align-items-center mb-2">
								@foreach (var conference in Enum.GetValues<Conference>())
								{
									<div class="form-check mr-2">
										<input class="form-check-input" type="radio" asp-for="Prediction.Conference" value="@conference" disabled="@buttonsDisabled" />
										<label class="form-check-label" asp-for="Prediction.Conference">
											@conference
										</label>
									</div>
								}
							</div>
						</div>
						<div class="form-group mt-3">
							<label class="mb-1">Options</label>
							<div id="options-list">
								@for (int i = 0; i < Model.Prediction.Options.Count; i++)
								{
									<div class="d-flex align-items-center mb-2">
										<input class="row-id" asp-for="@Model.Prediction.Options[i].Id" type="hidden" />
										<div class="mr-2 row-index">
											#@(i + 1)
										</div>
										<div class="mx-2 flex-grow-1">
											<input class="form-control" asp-for="@Model.Prediction.Options[i].DisplayText" disabled="@buttonsDisabled" />
										</div>
										@if (!buttonsDisabled)
										{
											<div class="mx-2">
												<button type="button" class="btn btn-danger" onclick="removeOption(this)">Remove</button>
											</div>
											<div class="ml-2">
												<button type="submit" class="btn btn-success" asp-page-handler="DeclareWinner" onclick="declareWinner(this)">Declare Winner</button>
											</div>
										}
										else
										{
											<div class="mx-2">
												@if (Model.Prediction.Options[i].IsWinner)
												{
													<div class="btn btn-success prediction-result">Won</div>
												}
												else
												{
													<div class="btn btn-danger prediction-result">Lost</div>
												}
											</div>
										}
									</div>
								}
							</div>
						</div>
						@if (!buttonsDisabled)
						{
							<div class="mt-3 row">
								<div class="col">
									<button type="submit" class="btn btn-primary mr-2" asp-page-handler="Save">Save</button>
									@if (!Model.IsCreate && Model.Prediction.EntriesAreOpen)
									{
										<button type="submit" class="btn btn-warning" asp-page-handler="CloseEntries">Close Entries</button>
									}
									else if (!Model.IsCreate && !Model.Prediction.EntriesAreOpen)
									{
										<button type="submit" class="btn btn-success" asp-page-handler="OpenEntries">Open Entries</button>
									}
								</div>
								<div class="col text-end">
									<button type="button" class="btn btn-secondary" onclick="addOption()">Add Option</button>
								</div>
							</div>
						}
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Hidden template for options -->
<div id="option-template" class="d-none">
	<input type="hidden" data-val="true" data-val-required="The Id field is required." id="Prediction_Options_(PIDX)__Id" name="Prediction.Options[(PIDX)].Id" value="0">
	<div class="mr-2 row-index">
		#(PIDX+)
	</div>
	<div class="mx-2 flex-grow-1">
		<input class="form-control" id="Prediction_Options_(PIDX)__DisplayText" name="Prediction.Options[(PIDX)].DisplayText" />
	</div>
	<div class="mx-2">
		<button type="button" class="btn btn-danger" onclick="removeOption(this)">Remove</button>
	</div>
	<div class="ml-2">
		<button type="submit" class="btn btn-success" asp-page-handler="DeclareWinner" onclick="declareWinner(this)">Declare Winner</button>
	</div>
</div>

@section Scripts
{
	<script>
		function addOption() {
			var optionsList = document.getElementById('options-list');
			var index = optionsList.children.length;
			var template = document.getElementById('option-template').innerHTML;
			var newOption = document.createElement('div');
			newOption.className = 'd-flex align-items-center mb-2';
			newOption.innerHTML = template.replaceAll('(PIDX)', index).replaceAll('(PIDX+)', index + 1);
			newOption.style.opacity = '0';
			newOption.style.marginTop = '-20px';
			newOption.style.transition = 'opacity 1s, margin-top 0.5s';
			optionsList.appendChild(newOption);
			setTimeout(function() {
				newOption.style.opacity = '1';
				newOption.style.marginTop = '0';
			}, 10);
		}

		function removeOption(button) {
			var option = button.closest('.d-flex');
			var optionHeight = option.offsetHeight;
			var style = window.getComputedStyle(option);
			var marginTop = parseInt(style.marginTop);
			var marginBottom = parseInt(style.marginBottom);
			var totalHeight = optionHeight + marginTop + marginBottom;

			option.style.transition = 'opacity 0.5s, margin-top 0.5s';
			option.style.opacity = '0';
			option.style.marginTop = `-${totalHeight}px`;
			setTimeout(function() {
				option.remove();
				renumberOptions();
			}, 500);
		}

		function renumberOptions() {
			var optionsList = document.getElementById('options-list');
			var options = optionsList.children;
			for (var i = 0; i < options.length; i++) {
				var optionNumber = options[i].querySelector('.row-index');
				if (optionNumber) {
					optionNumber.textContent = `#${i + 1}`;
				}

				var inputs = options[i].querySelectorAll('input, label');
				inputs.forEach(function(input) {
					var idRegex = /Prediction_Options_\d+__/;
					var nameRegex = /Prediction\.Options\[\d+\]\./;
					input.id = input.id.replace(idRegex, `Prediction_Options_${i}__`);
					input.name = input.name.replace(nameRegex, `Prediction.Options[${i}].`);
				});
			}
		}

		function declareWinner(button) {
			var parentForm = button.closest('form');
			var parentContainer = button.closest('.d-flex');
			var winnerOption = parentContainer.querySelector('input[type="hidden"]');
			var winnerOptionId = document.getElementById('WinnerOptionId');
			winnerOptionId.value = winnerOption.value;
			parentForm.submit();
		}
	</script>
}